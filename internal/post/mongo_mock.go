// Code generated by MockGen. DO NOT EDIT.
// Source: mongo_abstract.go

// Package post is a generated GoMock package.
package post

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMongoCursor is a mock of MongoCursor interface.
type MockMongoCursor struct {
	ctrl     *gomock.Controller
	recorder *MockMongoCursorMockRecorder
}

// MockMongoCursorMockRecorder is the mock recorder for MockMongoCursor.
type MockMongoCursorMockRecorder struct {
	mock *MockMongoCursor
}

// NewMockMongoCursor creates a new mock instance.
func NewMockMongoCursor(ctrl *gomock.Controller) *MockMongoCursor {
	mock := &MockMongoCursor{ctrl: ctrl}
	mock.recorder = &MockMongoCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoCursor) EXPECT() *MockMongoCursorMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockMongoCursor) All(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockMongoCursorMockRecorder) All(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockMongoCursor)(nil).All), arg0, arg1)
}

// MockMongoSingleResult is a mock of MongoSingleResult interface.
type MockMongoSingleResult struct {
	ctrl     *gomock.Controller
	recorder *MockMongoSingleResultMockRecorder
}

// MockMongoSingleResultMockRecorder is the mock recorder for MockMongoSingleResult.
type MockMongoSingleResultMockRecorder struct {
	mock *MockMongoSingleResult
}

// NewMockMongoSingleResult creates a new mock instance.
func NewMockMongoSingleResult(ctrl *gomock.Controller) *MockMongoSingleResult {
	mock := &MockMongoSingleResult{ctrl: ctrl}
	mock.recorder = &MockMongoSingleResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoSingleResult) EXPECT() *MockMongoSingleResultMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockMongoSingleResult) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMongoSingleResultMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMongoSingleResult)(nil).Decode), v)
}

// Err mocks base method.
func (m *MockMongoSingleResult) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockMongoSingleResultMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockMongoSingleResult)(nil).Err))
}

// MockMongoCollection is a mock of MongoCollection interface.
type MockMongoCollection struct {
	ctrl     *gomock.Controller
	recorder *MockMongoCollectionMockRecorder
}

// MockMongoCollectionMockRecorder is the mock recorder for MockMongoCollection.
type MockMongoCollectionMockRecorder struct {
	mock *MockMongoCollection
}

// NewMockMongoCollection creates a new mock instance.
func NewMockMongoCollection(ctrl *gomock.Controller) *MockMongoCollection {
	mock := &MockMongoCollection{ctrl: ctrl}
	mock.recorder = &MockMongoCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoCollection) EXPECT() *MockMongoCollectionMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockMongoCollection) DeleteOne(arg0 context.Context, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockMongoCollectionMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockMongoCollection)(nil).DeleteOne), arg0, arg1)
}

// Find mocks base method.
func (m *MockMongoCollection) Find(arg0 context.Context, arg1 interface{}) (MongoCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(MongoCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMongoCollectionMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoCollection)(nil).Find), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockMongoCollection) FindOne(arg0 context.Context, arg1 interface{}) MongoSingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(MongoSingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoCollectionMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoCollection)(nil).FindOne), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockMongoCollection) InsertOne(arg0 context.Context, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoCollectionMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoCollection)(nil).InsertOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockMongoCollection) UpdateOne(arg0 context.Context, arg1, arg2 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockMongoCollectionMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockMongoCollection)(nil).UpdateOne), arg0, arg1, arg2)
}
